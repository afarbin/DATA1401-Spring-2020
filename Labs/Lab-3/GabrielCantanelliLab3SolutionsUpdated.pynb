{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 2","language":"python","name":"python2"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.16"},"colab":{"name":"GabrielCantanelliLab3SolutionsUpdated.pynb","provenance":[{"file_id":"https://github.com/afarbin/DATA1401-Spring-2020/blob/master/Labs/Lab-3/Lab-3.ipynb","timestamp":1585695980785}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"0zBXl2-PuPcN","colab_type":"text"},"source":["# Lab 3- Tic Tac Toe\n","\n","[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github//afarbin/DATA1401-Spring-2020/blob/master/Labs/Lab-3/Lab-3.ipynb)\n","\n","In this lab your will build a n x n Tic Tac Toe game. As you do the exercises, make sure your solutions work for any size Tic Tac Toe game. "]},{"cell_type":"markdown","metadata":{"id":"tw0d1OGouPcU","colab_type":"text"},"source":["*Exercise 1:* Write a function that creates an n by n matrix (of list of lists) which will represent the state of a Tie Tac Toe game. Let 0, 1, and 2 represent empty, \"X\", or \"O\".\n"]},{"cell_type":"code","metadata":{"id":"HAMhDujtuPce","colab_type":"code","colab":{}},"source":["playerx = 1\n","playero = 2\n","#empty is set to \" \" in this example for use in the final function\n","empty = \" \"\n","\n","def makeboard(rows):\n","  board = []\n","  for i in range(rows):\n","    templist = []\n","    for n in range(rows):\n","      templist.append(empty)\n","    board.append(templist)\n","  return board"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QMDRV5tpuPc4","colab_type":"code","outputId":"9ec15465-0dc1-4b75-e829-c5736bda74ef","executionInfo":{"status":"ok","timestamp":1585713975542,"user_tz":300,"elapsed":7439,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["makeboard(3)"],"execution_count":445,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]"]},"metadata":{"tags":[]},"execution_count":445}]},{"cell_type":"markdown","metadata":{"id":"PsfsjnHEuPdG","colab_type":"text"},"source":["*Exercise 2:* Write a function that takes a `n` by `n` matrix representing a tic-tac-toe game, and returns -1, 0, 1, or 2 indicating the game is incomplete, the game is a draw, player 1 has won, or player 2 has one, respectively. Here are some example inputs you can use to test your code:"]},{"cell_type":"code","metadata":{"id":"gHHn_RduuPdW","colab_type":"code","colab":{}},"source":["#function is updated to make checking the status of the board (during later usage) more simple\n","\n","#checks if a player has won, lost, or if there is a tie\n","def status(board, playerx, playero):\n","  playerx=str(playerx)+\" \"\n","  playero=str(playero)+\" \"\n","  p1comp = list()\n","  p2comp = list()\n","  complist = list()\n","  boardlength = range(len(board))\n","  \n","  #filling comparison lists:\n","  for i in boardlength:\n","    p1comp.append(playerx)\n","    p2comp.append(playero)\n","  #compares current and win condition board lists:\n","  def compare(complist, p1comp, p2comp):\n","    if complist == p1comp:\n","      return 1\n","    elif complist == p2comp:\n","      return 2\n","  #checks for draw:\n","  def tie():\n","    fullcount = 0\n","    for rows in boardlength:\n","        for cols in boardlength:\n","          if str(board[rows][cols]) == playerx or str(board[rows][cols]) == playero:\n","            fullcount+=1\n","    if fullcount == len(board)**2:\n","      print(\"The game is a draw.\")\n","      return True\n","  if tie():\n","    return -1\n","\n","  #checks for win: \n","  #vertical check:\n","  for cols in range(len(board)):\n","    complist = list()\n","    for rows in boardlength:\n","      if str(board[rows][cols]) == playerx or str(board[rows][cols]) == playero:\n","        complist.append(board[rows][cols])\n","    if compare(complist, p1comp, p2comp)==1:\n","      print(\"Player 1 wins!\")\n","      return 1\n","    elif compare(complist, p1comp, p2comp)==2:\n","      print(\"Player 2 wins!\")\n","      return 2\n","\n","  #horizontal check:\n","  for rows in boardlength:\n","    complist = list()\n","    for cols in boardlength:\n","      if str(board[rows][cols]) == playerx or str(board[rows][cols]) == playero:\n","        complist.append(board[rows][cols])\n","    if compare(complist, p1comp, p2comp)==1:\n","      print(\"Player 1 wins!\")\n","      return 1\n","    elif compare(complist, p1comp, p2comp)==2:\n","      print(\"Player 2 wins!\")\n","      return 2\n","\n","  #diagonal check:\n","  complist=list()\n","  for n in boardlength:\n","    if str(board[n][n]) == playerx or str(board[n][n]) == playero:\n","      complist.append(board[n][n])\n","  if compare(complist, p1comp, p2comp)==1:\n","    print(\"Player 1 wins!\")\n","    return 1\n","  elif compare(complist, p1comp, p2comp)==2:\n","    print(\"Player 2 wins!\")\n","    return 2\n","\n","  #antidiagonal check:\n","  complist = list()\n","  for n in boardlength:\n","    if str(board[n][-(n+1)]) == playerx or str(board[n][-(n+1)]) == playero:\n","      complist.append(board[n][-(n+1)])\n","  if compare(complist, p1comp, p2comp)==1:\n","    print(\"Player 1 wins!\")\n","    return 1\n","  elif compare(complist, p1comp, p2comp)==2:\n","    return 2  \n","    print(\"Player 2 wins!\")\n","\n","  return 0"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"khOUwS_8uPdL","colab_type":"code","colab":{}},"source":["#answers are configured as such to reflect the structure of the lists comprising the board\n","winner_is_1 = [[\"X \", \"O \", \"O \"],\n","\t\t\t\t\t\t   [\"X \", \"X \", \"  \"],\n","\t\t\t\t\t\t\t [\"  \", \"X \", \"X \"]]\n","\n","winner_is_2 = [[\"O \", \"X \", \"X \"],\n","\t\t\t\t\t\t\t [\"O \", \"O \", \"  \"],\n","\t\t\t\t\t\t\t [\"O \", \"  \", \"  \"]]\n","\n","winner_is_also_2 = [[\"O \", \"O \", \"O \"],\n","\t\t\t\t\t\t   [\"X \", \"X \", \"  \"],\n","\t\t\t\t\t\t\t [\"  \", \"X \", \"X \"]]\n","\n","winner_is_also_1 = [[\"  \", \"O \", \"X \"],\n","\t\t\t\t\t\t\t\t\t\t[\"O \", \"X \", \"O \"],\n","\t\t\t\t\t\t\t\t\t\t[\"X \", \"O \", \"O \"]]\n","\n","also_no_winner = [[\"X \", \"O \", \"X \"],\n","\t\t\t\t\t\t\t\t\t[\"O \", \"X \", \"O \"],\n","\t\t\t\t\t\t\t\t\t[\"O \", \"X \", \"O \"]]\n","\n","incomplete = [[\"O \",\"  \"],[\"  \",\"  \"]]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"myBRGKUDuPdj","colab_type":"code","outputId":"1668278a-59ba-4fe8-c1ae-61f95f3f135e","executionInfo":{"status":"ok","timestamp":1585714232176,"user_tz":300,"elapsed":353,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}},"colab":{"base_uri":"https://localhost:8080/","height":219}},"source":["playerx=\"X\"\n","playero=\"O\"\n","print(status(winner_is_1, playerx, playero))\n","print(status(winner_is_2, playerx, playero))\n","print(status(winner_is_also_2, playerx, playero))\n","print(status(winner_is_also_1, playerx, playero))\n","print(status(also_no_winner, playerx, playero))\n","print(status(incomplete, playerx, playero))"],"execution_count":465,"outputs":[{"output_type":"stream","text":["Player 1 wins!\n","1\n","Player 2 wins!\n","2\n","Player 2 wins!\n","2\n","Player 1 wins!\n","1\n","The game is a draw.\n","-1\n","0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"AA1oBYwwuPdx","colab_type":"text"},"source":["*Exercise 3:* Write a function that takes 2 integers `n` and `m` as input and draws a `n` by `m` game board. For example the following is a 3x3 board:\n","```\n","   --- --- --- \n","  |   |   |   | \n","   --- --- ---  \n","  |   |   |   | \n","   --- --- ---  \n","  |   |   |   | \n","   --- --- --- \n","   ```"]},{"cell_type":"code","metadata":{"id":"VgnNUrTXuPd1","colab_type":"code","colab":{}},"source":["#creates initial board (first version)\n","def boardgraphic(n, m):\n","  board = []\n","  rowrange = range(n+(n+1))\n","  colrange = range(m+1)\n","  #adds dashed lines to board (vertical boundaries)\n","  for n in rowrange:\n","    if n%2==0:\n","      tempstr = \"\"\n","      for n in range(len(colrange)-1):\n","        tempstr += \" ---\"\n","      board.append(tempstr)\n","  #adds spaces and borders for user entries\n","    else:\n","      tempstr = \"\"\n","      for m in colrange:\n","        tempstr += \"|   \"\n","      board.append(tempstr)\n","  for j in range(len(board)):\n","    print(board[j])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CaHxJMIIuPeF","colab_type":"code","outputId":"80e69915-ded2-4c00-a708-7a5379f48e28","executionInfo":{"status":"ok","timestamp":1585713975554,"user_tz":300,"elapsed":7372,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}},"colab":{"base_uri":"https://localhost:8080/","height":403}},"source":["boardgraphic(10, 12)"],"execution_count":450,"outputs":[{"output_type":"stream","text":[" --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n","|   |   |   |   |   |   |   |   |   |   |   |   |   \n"," --- --- --- --- --- --- --- --- --- --- --- ---\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HwDaIMcluPeQ","colab_type":"text"},"source":["*Exercise 4:* Modify exercise 3, so that it takes a matrix of the form from exercise 2 and draws a tic-tac-tie board with \"X\"s and \"O\"s.  "]},{"cell_type":"code","metadata":{"id":"0NdCWyqK1DdS","colab_type":"code","colab":{}},"source":["#creates initial board, to be used as a setup, with a letter/number grid\n","def initialboard(board):\n","    boardlist = []\n","    rowrange = range(2*len(board)+1)\n","    colrange = range(len(board))\n","    numcount = 0\n","    rowcount=0\n","    colcount=0\n","\n","    for n in rowrange:\n","      #adds dashed horizontal lines (boundaries):\n","      if n%2==0:\n","        tempstr = \"\"\n","        for n in range(len(colrange)):\n","          tempstr += \" ---\"\n","        boardlist.append(tempstr)\n","      #adds spaces and borders for user entries:\n","      else:\n","        templist = []\n","        numcount += 1\n","        for m in range(2*len(colrange)+1):\n","          if m%2==0:\n","            templist.append(\"| \")\n","          else: \n","            #updated to add elements of the provided matrix to the board\n","            templist.append(str(board[rowcount][colcount])+\" \") \n","            colcount+=1\n","        templist.append(str(numcount))\n","        boardlist.append(templist)\n","        rowcount+=1\n","        colcount=0\n","      #prints board\n","    for rows in boardlist:\n","      print(rows)\n","    \n","    return boardlist"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YqDI0_AruPed","colab_type":"code","outputId":"672b2b54-5424-4d7e-fe99-d05a70a58f02","executionInfo":{"status":"ok","timestamp":1585713975558,"user_tz":300,"elapsed":7352,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}},"colab":{"base_uri":"https://localhost:8080/","height":274}},"source":["board = [[\"O\", \"X\", \"X\"],\n","\t\t\t\t\t\t\t [\"O\", \"O\", \" \"],\n","\t\t\t\t\t\t\t [\"O\", \" \", \" \"]]\n","initialboard(board)"],"execution_count":452,"outputs":[{"output_type":"stream","text":[" --- --- ---\n","['| ', 'O ', '| ', 'X ', '| ', 'X ', '| ', '1']\n"," --- --- ---\n","['| ', 'O ', '| ', 'O ', '| ', '  ', '| ', '2']\n"," --- --- ---\n","['| ', 'O ', '| ', '  ', '| ', '  ', '| ', '3']\n"," --- --- ---\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[' --- --- ---',\n"," ['| ', 'O ', '| ', 'X ', '| ', 'X ', '| ', '1'],\n"," ' --- --- ---',\n"," ['| ', 'O ', '| ', 'O ', '| ', '  ', '| ', '2'],\n"," ' --- --- ---',\n"," ['| ', 'O ', '| ', '  ', '| ', '  ', '| ', '3'],\n"," ' --- --- ---']"]},"metadata":{"tags":[]},"execution_count":452}]},{"cell_type":"markdown","metadata":{"id":"LGXp1c11uPem","colab_type":"text"},"source":["*Exercise 5:* Write a function that takes a game board, player number, and `(x,y)` coordinates and places \"X\" or \"O\" in the correct location of the game board. Make sure that you only allow filling previously empty locations. Return `True` or `False` to indicate successful placement of \"X\" or \"O\"."]},{"cell_type":"code","metadata":{"id":"YPKClyvJuPen","colab_type":"code","colab":{}},"source":["#returns updated board\n","def boardtrack(board):\n","  colnum = (len(board)-1)/2\n","  #prints board\n","  for i in range(len(board)):\n","    if i%2==0:\n","      print(board[i])\n","    else:\n","      print(\"\".join(board[i]))\n","\n","#modifies board\n","def fillspace(board, xcood, ycood, player, empty):\n","  playerx = \"X\"\n","  playero = \"O\"\n","  x = 1+(2*(xcood-1))\n","  y = 1+(2*(ycood-1))\n","  #updates board:\n","  if board[y][x] == str(empty)+ \" \":\n","    if player == playerx:\n","      board[y][x] = player + \" \"\n","    elif player == playero:\n","      board[y][x] = player + \" \"\n","    boardtrack(board)\n","    return True\n","  else:\n","    print(\"Invalid space. Please try again.\")\n","    if player==playerx:\n","      player=1\n","    elif player==playero:\n","      player=2\n","    return False"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3VG-Vk41uPe0","colab_type":"code","outputId":"43fecf65-a724-42d4-a026-6e528d175ba5","executionInfo":{"status":"ok","timestamp":1585713975560,"user_tz":300,"elapsed":7332,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}},"colab":{"base_uri":"https://localhost:8080/","height":293}},"source":["board = [[\"O\", \"X\", \"X\"],\n","\t\t\t\t\t\t\t [\"O\", \"O\", \" \"],\n","\t\t\t\t\t\t\t [\"O\", \" \", \" \"]]\n","\t\n","fillspace(initialboard(board),3,2,\"X\",\" \")"],"execution_count":454,"outputs":[{"output_type":"stream","text":[" --- --- ---\n","['| ', 'O ', '| ', 'X ', '| ', 'X ', '| ', '1']\n"," --- --- ---\n","['| ', 'O ', '| ', 'O ', '| ', '  ', '| ', '2']\n"," --- --- ---\n","['| ', 'O ', '| ', '  ', '| ', '  ', '| ', '3']\n"," --- --- ---\n"," --- --- ---\n","| O | X | X | 1\n"," --- --- ---\n","| O | O | X | 2\n"," --- --- ---\n","| O |   |   | 3\n"," --- --- ---\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":454}]},{"cell_type":"markdown","metadata":{"id":"G3LzGS9QuPfD","colab_type":"text"},"source":["*Exercise 6:* Modify Exercise 4 to show column and row labels so that players can specify location using \"A2\" or \"C1\"."]},{"cell_type":"code","metadata":{"id":"wXcYpLEeuPfF","colab_type":"code","colab":{}},"source":["#returns updated board; updated version of \"boardtrack\" that provides a grid\n","def boardtrack(board):\n","  alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWYXZ\"\n","  colnum = (len(board)-1)/2\n","  #prints alphabet grid\n","  alphstring = \"\"\n","  for i in range(colnum):\n","    alphstring += \"  \" + alphabet[i] + \" \"\n","  print(alphstring)\n","  #prints board\n","  for i in range(len(board)):\n","    if i%2==0:\n","      print(board[i])\n","    else:\n","      print(\"\".join(board[i]))\n","\n","#modifies board\n","def fillspace(board, xcood, ycood, player, empty):\n","  playerx = \"X\"\n","  playero = \"O\"\n","  x = 1+(2*(xcood-1))\n","  y = 1+(2*(ycood-1))\n","  #updates board:\n","  if board[y][x] == str(empty)+ \" \":\n","    if player == playerx:\n","      board[y][x] = player + \" \"\n","    elif player == playero:\n","      board[y][x] = player + \" \"\n","    boardtrack(board)\n","    return True\n","  else:\n","    print(\"Invalid space. Please try again.\")\n","    if player==playerx:\n","      player=1\n","    elif player==playero:\n","      player=2\n","    boardtrack(board)\n","    return False"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EdLX7EXLuPfL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":311},"outputId":"6be0c230-1611-41fc-f837-ed22b35ad77f","executionInfo":{"status":"ok","timestamp":1585713975564,"user_tz":300,"elapsed":7310,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}}},"source":["board = [[\"O\", \"X\", \"X\"],\n","\t\t\t\t\t\t\t [\"O\", \"O\", \" \"],\n","\t\t\t\t\t\t\t [\"O\", \" \", \" \"]]\n","\t\n","fillspace(initialboard(board),3,3,\"X\",\" \")"],"execution_count":456,"outputs":[{"output_type":"stream","text":[" --- --- ---\n","['| ', 'O ', '| ', 'X ', '| ', 'X ', '| ', '1']\n"," --- --- ---\n","['| ', 'O ', '| ', 'O ', '| ', '  ', '| ', '2']\n"," --- --- ---\n","['| ', 'O ', '| ', '  ', '| ', '  ', '| ', '3']\n"," --- --- ---\n","  A   B   C \n"," --- --- ---\n","| O | X | X | 1\n"," --- --- ---\n","| O | O |   | 2\n"," --- --- ---\n","| O |   | X | 3\n"," --- --- ---\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":456}]},{"cell_type":"markdown","metadata":{"id":"HdM1RPveuPfV","colab_type":"text"},"source":["*Exercise 7:* Write a function that takes a board, player number, and location specified as in exercise 6 and then calls exercise 5 to correctly modify the board.  "]},{"cell_type":"code","metadata":{"id":"7J-1vIb4uPfW","colab_type":"code","colab":{}},"source":["def turn(board, player, xcood, ycood, empty):\n","  if player==1:\n","    player=\"X\"\n","  elif player==2:\n","    player=\"O\"\n","  #calls fillspace to modify the board\n","  if fillspace(board, xcood, ycood, player, empty):\n","    return None \n","  else: \n","    if player==\"X\":\n","      player=1\n","    elif player==\"O\":\n","      player=2\n","    return game(board, player)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Viva765luPfd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":293},"outputId":"452d4167-0a92-4bc3-b039-0d8f87295609","executionInfo":{"status":"ok","timestamp":1585713975566,"user_tz":300,"elapsed":7283,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}}},"source":["board = [[\"O\", \"X\", \"X\"],\n","\t\t\t\t\t\t\t [\"O\", \"O\", \" \"],\n","\t\t\t\t\t\t\t [\"O\", \"O\", \" \"]]\n","turn(initialboard(board), 1, 3, 3, \" \")"],"execution_count":458,"outputs":[{"output_type":"stream","text":[" --- --- ---\n","['| ', 'O ', '| ', 'X ', '| ', 'X ', '| ', '1']\n"," --- --- ---\n","['| ', 'O ', '| ', 'O ', '| ', '  ', '| ', '2']\n"," --- --- ---\n","['| ', 'O ', '| ', 'O ', '| ', '  ', '| ', '3']\n"," --- --- ---\n","  A   B   C \n"," --- --- ---\n","| O | X | X | 1\n"," --- --- ---\n","| O | O |   | 2\n"," --- --- ---\n","| O | O | X | 3\n"," --- --- ---\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CHIOQOhTuPfk","colab_type":"text"},"source":["*Exercise 8:* Write a function is called with a board and player number, takes input from the player using python's `input`, and modifies the board using your function from exercise 7. Note that you should keep asking for input until you have gotten a valid input that results in a valid move."]},{"cell_type":"code","metadata":{"id":"ckuLE_e5uPfl","colab_type":"code","colab":{}},"source":["def game(board, playernum, playerx=\"X\", playero=\"O\", empty=\" \"):\n","  alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWYXZ\"\n","  colnum = (len(board)-1)/2\n","  empty = \" \"\n","  #checks for valid player number\n","  check=0\n","  while check==0:\n","    if playernum==1 or playernum == 2:\n","      check = 1\n","    else:\n","      playernum = input(\"Invalid player number. Please re-enter.\")\n","  #checks and accepts letter coordinate:\n","  check=0\n","  letcood = input(\"Please enter your letter coordinate.\")\n","  while check==0:\n","    for i in range(colnum):\n","      if letcood == alphabet[i]:\n","        letcood = i+1\n","        check = 1\n","    if check==0:\n","      letcood = input(\"Invalid letter coordinate. Please re-enter.\")\n","  #checks and accepts number coordinate:\n","  check=0\n","  numcood = input(\"Please enter your number coordinate.\")\n","  while check==0:\n","    if isinstance(numcood,int) and numcood<=colnum and numcood>0:\n","      check=1\n","    else:\n","      numcood = input(\"Invalid number coordinate. Please re-enter.\")\n","  #uses 'turn' to modify the board with the given coordinates\n","  turn(board, playernum, letcood, numcood, empty)\n","  #copies board into list of player entries of to be read by 'status'\n","  boardcopy = []\n","  for rows in range(len(board)):\n","    templist = []\n","    if rows%2!=0:\n","      for cols in range(len(board[1])-1): #len(board[0])-1 to account for the grid number to the right\n","        if cols%2!=0:\n","          templist.append(board[rows][cols]) \n","      boardcopy.append(templist)\n","  #checks status of board\n","  if status(boardcopy, playerx, playero)!=0:\n","    print(\"Thanks for playing!\")\n","    return None\n","  #switches players\n","  if playernum==1:\n","    playernum=2\n","  elif playernum==2:\n","    playernum=1\n","  #new turn\n","  return game(board,playernum)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SmIvEPJJuPfu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":766},"outputId":"4270ae02-d9e4-42d6-911e-1ac93ffd6d34","executionInfo":{"status":"error","timestamp":1585714012626,"user_tz":300,"elapsed":44320,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}}},"source":["board = [[\" \", \" \", \" \"],\n","\t\t\t\t\t\t\t [\" \", \" \", \" \"],\n","\t\t\t\t\t\t\t [\" \", \" \", \" \"]]\n","game(initialboard(board), 1, \"X\", \"O\", \" \")"],"execution_count":460,"outputs":[{"output_type":"stream","text":[" --- --- ---\n","['| ', '  ', '| ', '  ', '| ', '  ', '| ', '1']\n"," --- --- ---\n","['| ', '  ', '| ', '  ', '| ', '  ', '| ', '2']\n"," --- --- ---\n","['| ', '  ', '| ', '  ', '| ', '  ', '| ', '3']\n"," --- --- ---\n","Please enter your letter coordinate.\"G\"\n","Invalid letter coordinate. Please re-enter.5\n","Invalid letter coordinate. Please re-enter.\"ZZ\"\n","Invalid letter coordinate. Please re-enter.\"B\"\n","Please enter your number coordinate.\"B\"\n","Invalid number coordinate. Please re-enter.22\n","Invalid number coordinate. Please re-enter.2\n","  A   B   C \n"," --- --- ---\n","|   |   |   | 1\n"," --- --- ---\n","|   | X |   | 2\n"," --- --- ---\n","|   |   |   | 3\n"," --- --- ---\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-460-651cc752f563>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m                                                          \u001b[0;34m[\u001b[0m\u001b[0;34m\" \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\" \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\" \"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \t\t\t\t\t\t\t [\" \", \" \", \" \"]]\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mgame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minitialboard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboard\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"X\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"O\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\" \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-459-d7307869c3a7>\u001b[0m in \u001b[0;36mgame\u001b[0;34m(board, playernum, playerx, playero, empty)\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0mplayernum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m   \u001b[0;31m#new turn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mgame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboard\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mplayernum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-459-d7307869c3a7>\u001b[0m in \u001b[0;36mgame\u001b[0;34m(board, playernum, playerx, playero, empty)\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0;31m#checks and accepts letter coordinate:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m   \u001b[0mcheck\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m   \u001b[0mletcood\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Please enter your letter coordinate.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m   \u001b[0;32mwhile\u001b[0m \u001b[0mcheck\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python2.7/dist-packages/ipykernel/ipkernel.pyc\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(prompt)\u001b[0m\n\u001b[1;32m    162\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sys_eval_input\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltin_mod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m             \u001b[0mbuiltin_mod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw_input\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw_input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 164\u001b[0;31m             \u001b[0mbuiltin_mod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mprompt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    165\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_save_getpass\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetpass\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    166\u001b[0m         \u001b[0mgetpass\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetpass\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python2.7/dist-packages/ipykernel/kernelbase.pyc\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 705\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    706\u001b[0m         )\n\u001b[1;32m    707\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python2.7/dist-packages/ipykernel/kernelbase.pyc\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    733\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    734\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 735\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    736\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    737\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"OLsOu8_duPf1","colab_type":"text"},"source":["*Exercise 9:* Use all of the previous exercises to implement a full tic-tac-toe game, where an appropriate board is drawn, 2 players are repeatedly asked for a location coordinates of where they wish to place a mark, and the game status is checked until a player wins or a draw occurs."]},{"cell_type":"code","metadata":{"id":"H9LVGUiQuPf4","colab_type":"code","colab":{}},"source":["playerx = \"X\"\n","playero = \"O\"\n","empty = \" \"\n","def master(playernum, size):\n","  game(initialboard(makeboard(size)), playernum)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dn4CI0d5uPgA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":586},"outputId":"d543ef7e-8c04-4b18-c01a-5e791e55fb4d","executionInfo":{"status":"ok","timestamp":1585714053423,"user_tz":300,"elapsed":22864,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}}},"source":["master(1,2)"],"execution_count":462,"outputs":[{"output_type":"stream","text":[" --- ---\n","['| ', '  ', '| ', '  ', '| ', '1']\n"," --- ---\n","['| ', '  ', '| ', '  ', '| ', '2']\n"," --- ---\n","Please enter your letter coordinate.\"A\"\n","Please enter your number coordinate.1\n","  A   B \n"," --- ---\n","| X |   | 1\n"," --- ---\n","|   |   | 2\n"," --- ---\n","Please enter your letter coordinate.\"B\"\n","Please enter your number coordinate.1\n","  A   B \n"," --- ---\n","| X | O | 1\n"," --- ---\n","|   |   | 2\n"," --- ---\n","Please enter your letter coordinate.\"A\"\n","Please enter your number coordinate.2\n","  A   B \n"," --- ---\n","| X | O | 1\n"," --- ---\n","| X |   | 2\n"," --- ---\n","Player 1 wins!\n","Thanks for playing!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bYd2AtzpuPgK","colab_type":"text"},"source":["*Exercise 10:* Test that your game works for 5x5 Tic Tac Toe.  "]},{"cell_type":"code","metadata":{"id":"QKTQ8SnCuPgM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"d3407332-720a-45d6-acf5-19f352b2f96a","executionInfo":{"status":"ok","timestamp":1585714117219,"user_tz":300,"elapsed":57834,"user":{"displayName":"Gabe Cantanelli","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjQjqs_kgdI9r3HF5C9lGnMEToqzzv4f2TQrsBCAQ=s64","userId":"01851243479213843855"}}},"source":["master(1,5)"],"execution_count":463,"outputs":[{"output_type":"stream","text":[" --- --- --- --- ---\n","['| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '1']\n"," --- --- --- --- ---\n","['| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '2']\n"," --- --- --- --- ---\n","['| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '3']\n"," --- --- --- --- ---\n","['| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '4']\n"," --- --- --- --- ---\n","['| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '  ', '| ', '5']\n"," --- --- --- --- ---\n","Please enter your letter coordinate.\"C\"\n","Please enter your number coordinate.3\n","  A   B   C   D   E \n"," --- --- --- --- ---\n","|   |   |   |   |   | 1\n"," --- --- --- --- ---\n","|   |   |   |   |   | 2\n"," --- --- --- --- ---\n","|   |   | X |   |   | 3\n"," --- --- --- --- ---\n","|   |   |   |   |   | 4\n"," --- --- --- --- ---\n","|   |   |   |   |   | 5\n"," --- --- --- --- ---\n","Please enter your letter coordinate.\"D\"\n","Please enter your number coordinate.4\n","  A   B   C   D   E \n"," --- --- --- --- ---\n","|   |   |   |   |   | 1\n"," --- --- --- --- ---\n","|   |   |   |   |   | 2\n"," --- --- --- --- ---\n","|   |   | X |   |   | 3\n"," --- --- --- --- ---\n","|   |   |   | O |   | 4\n"," --- --- --- --- ---\n","|   |   |   |   |   | 5\n"," --- --- --- --- ---\n","Please enter your letter coordinate.\"B\"\n","Please enter your number coordinate.4\n","  A   B   C   D   E \n"," --- --- --- --- ---\n","|   |   |   |   |   | 1\n"," --- --- --- --- ---\n","|   |   |   |   |   | 2\n"," --- --- --- --- ---\n","|   |   | X |   |   | 3\n"," --- --- --- --- ---\n","|   | X |   | O |   | 4\n"," --- --- --- --- ---\n","|   |   |   |   |   | 5\n"," --- --- --- --- ---\n","Please enter your letter coordinate.\"D\"\n","Please enter your number coordinate.1\n","  A   B   C   D   E \n"," --- --- --- --- ---\n","|   |   |   | O |   | 1\n"," --- --- --- --- ---\n","|   |   |   |   |   | 2\n"," --- --- --- --- ---\n","|   |   | X |   |   | 3\n"," --- --- --- --- ---\n","|   | X |   | O |   | 4\n"," --- --- --- --- ---\n","|   |   |   |   |   | 5\n"," --- --- --- --- ---\n","Please enter your letter coordinate.\"A\"\n","Please enter your number coordinate.5\n","  A   B   C   D   E \n"," --- --- --- --- ---\n","|   |   |   | O |   | 1\n"," --- --- --- --- ---\n","|   |   |   |   |   | 2\n"," --- --- --- --- ---\n","|   |   | X |   |   | 3\n"," --- --- --- --- ---\n","|   | X |   | O |   | 4\n"," --- --- --- --- ---\n","| X |   |   |   |   | 5\n"," --- --- --- --- ---\n","Please enter your letter coordinate.\"G\"\n","Invalid letter coordinate. Please re-enter.4\n","Invalid letter coordinate. Please re-enter.\"E\"\n","Please enter your number coordinate.2\n","  A   B   C   D   E \n"," --- --- --- --- ---\n","|   |   |   | O |   | 1\n"," --- --- --- --- ---\n","|   |   |   |   | O | 2\n"," --- --- --- --- ---\n","|   |   | X |   |   | 3\n"," --- --- --- --- ---\n","|   | X |   | O |   | 4\n"," --- --- --- --- ---\n","| X |   |   |   |   | 5\n"," --- --- --- --- ---\n","Please enter your letter coordinate.\"D\"\n","Please enter your number coordinate.2\n","  A   B   C   D   E \n"," --- --- --- --- ---\n","|   |   |   | O |   | 1\n"," --- --- --- --- ---\n","|   |   |   | X | O | 2\n"," --- --- --- --- ---\n","|   |   | X |   |   | 3\n"," --- --- --- --- ---\n","|   | X |   | O |   | 4\n"," --- --- --- --- ---\n","| X |   |   |   |   | 5\n"," --- --- --- --- ---\n","Please enter your letter coordinate.\"D\"\n","Please enter your number coordinate.3\n","  A   B   C   D   E \n"," --- --- --- --- ---\n","|   |   |   | O |   | 1\n"," --- --- --- --- ---\n","|   |   |   | X | O | 2\n"," --- --- --- --- ---\n","|   |   | X | O |   | 3\n"," --- --- --- --- ---\n","|   | X |   | O |   | 4\n"," --- --- --- --- ---\n","| X |   |   |   |   | 5\n"," --- --- --- --- ---\n","Please enter your letter coordinate.\"E\"\n","Please enter your number coordinate.1\n","  A   B   C   D   E \n"," --- --- --- --- ---\n","|   |   |   | O | X | 1\n"," --- --- --- --- ---\n","|   |   |   | X | O | 2\n"," --- --- --- --- ---\n","|   |   | X | O |   | 3\n"," --- --- --- --- ---\n","|   | X |   | O |   | 4\n"," --- --- --- --- ---\n","| X |   |   |   |   | 5\n"," --- --- --- --- ---\n","Player 1 wins!\n","Thanks for playing!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"BvGstqLguPgV","colab_type":"text"},"source":["*Exercise 11: (Extra Credit)* Develop a version of the game where one player is the computer. Note that you don't need to do an extensive seach for the best move. You can have the computer simply protect against loosing and otherwise try to win with straight or diagonal patterns."]},{"cell_type":"code","metadata":{"id":"zTfr3EH7uPgX","colab_type":"code","colab":{}},"source":["# Write you solution here"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"U-pAy_JauPgh","colab_type":"code","colab":{}},"source":["# Test your solution here"],"execution_count":0,"outputs":[]}]}